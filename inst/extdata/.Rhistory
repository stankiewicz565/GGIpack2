get_classes = function(owlfile){
cl <- basilisk::basiliskRun(env=ontoProc_env, function() {
o2 = reticulate::import("owlready2") # 'cached' by reticulate?
o2$get_ontology(owlfile)$load()$classes()
})
basiliskStop(cl)
list(o2=02)
}
get_classes()
get_classes()
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=ontoProc_env )
o2 <- basilisk::basiliskRun(env=cl function() {
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=ontoProc_env)
o2 <- basilisk::basiliskRun(env=cl function() {
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=ontoProc_env)
o2 <- basilisk::basiliskRun(env=cl, function() {
X = reticulate::import("owlready2") # 'cached' by reticulate?
#o2$get_ontology(owlfile)$load()$classes()
})
basiliskStop(cl)
list(o2=02)
}
get_classes()
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=ontoProc_env)
o2 <- basilisk::basiliskRun(env=cl, function() {
X = reticulate::import("owlready2") # 'cached' by reticulate?
names(X)
#o2$get_ontology(owlfile)$load()$classes()
})
basiliskStop(cl)
list(o2=02)
}
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=ontoProc_env)
o2 <- basilisk::basiliskRun(env=cl, function() {
X <- reticulate::import("owlready2") # 'cached' by reticulate?
names(X)
#o2$get_ontology(owlfile)$load()$classes()
})
basiliskStop(cl)
list(o2=02)
}
get_classes()
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=ontoProc_env)
o2 <- basilisk::basiliskRun(env=cl, function() {
X <- reticulate::import("owlready2") # 'cached' by reticulate?
names(X)
})
basiliskStop(cl)
list(o2=02)
}
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=ontoProc_env)
o2 <- basilisk::basiliskRun(env=cl, function() {
X <- reticulate::import("owlready2") # 'cached' by reticulate?
names(X)
})
basiliskStop(cl)
list(o2=02)
}
get_classes()
get_classes()
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=ontoProc_env)
o2 <- basilisk::basiliskRun(env=cl, function() {
X <- reticulate::import("owlready2") # 'cached' by reticulate?
names(X)
})
basiliskStop(cl)
list(o2=02)
}
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=ontoProc_env)
o2 <- basilisk::basiliskRun(env=cl, function() {
X <- reticulate::import("owlready2") # 'cached' by reticulate?
names(X)
})
basiliskStop(cl)
list(o2=02)
}
get_classes()
#' @importFrom basilisk BasiliskEnvironment
ontoProc_env <- basilisk::BasiliskEnvironment(envname="ontoProc_env",
pkgname="ontoProc",
packages=c("owlready2==0.45")
)
#' @importFrom basilisk BasiliskEnvironment
ontoProc_env <- basilisk::BasiliskEnvironment(envname="ontoProc_env",
pkgname="ontoProc",
packages=c("owlready2==0.45")
)
get_classes()
cl <- basilisk::basiliskStart(env=ontoProc_env)
cl
o2 <- basilisk::basiliskRun(env=cl, function() {
X <- reticulate::import("owlready2") # 'cached' by reticulate?
names(X)
})
??BasiliskEnvironment
ontoProc_env
env1 <- BasiliskEnvironment("env1", pkgname="son.of.basilisk",
packages=c(basilisk::pandas_spec_pip(), basilisk::python_dateutil_spec_pip(),
basilisk::pytz_spec_pip()))
env1
library(basilisk)
env1 <- BasiliskEnvironment("env1", pkgname="son.of.basilisk",
packages=c(basilisk::pandas_spec_pip(), basilisk::python_dateutil_spec_pip(),
basilisk::pytz_spec_pip()))
env1
library(tidyverse)
BiocManager::install("tidyverse")
BiocManager::valid()
BiocManager::install(c(
"Biostrings", "bookdown", "celldex", "curl", "DelayedArray", "digest", "GenomeInfoDb", "igraph",
"rmarkdown", "S4Arrays", "S4Vectors", "systemfonts", "tidyselect"
), update = TRUE, ask = FALSE, force = TRUE)
# necessary for python module control
bsklenv <- basilisk::BasiliskEnvironment(envname="bsklenv",
pkgname="litbas", packages="", pip="owlready2==0.45")
#' demo
#' @param owlfile path to owl file
#' @export
get_classes = function(owlfile) {
proc = basilisk::basiliskStart(bsklenv)
basilisk::basiliskRun(proc, function(owlfile) {
o2 = reticulate::import("owlready2") # 'cached' by reticulate?
o2$get_ontology(owlfile)$load()$classes()
}, owlfile)
}
path = "/Users/sarastankiewicz/workdir/hcao.owl"
foo = get_classes(owlfile= path)
undebug(get_classes)
foo = get_classes(owlfile= path)
BiocManager::install("litbas")
foo = get_classes(owlfile= path)
BiocManager::install("litbas")
BiocManager::install("litbas", type = "binary")
BiocManager::install("litbas")
library(litbas)
library(littlebas)
#' @importFrom basilisk BasiliskEnvironment
bsklenv <- basilisk::BasiliskEnvironment(envname="bsklenv",
pkgname="ontoProc",
packages="python=3.9"
pip="owlready2==0.45"
#' @importFrom basilisk BasiliskEnvironment
bsklenv <- basilisk::BasiliskEnvironment(envname="bsklenv",
pkgname="ontoProc",
packages="python=3.9",
pip="owlready2==0.45"
)
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=bsklenv)
o2 <- basilisk::basiliskRun(env=cl, function() {
X <- reticulate::import("owlready2") # 'cached' by reticulate?
names(X)
})
basiliskStop(cl)
list(o2=02)
}
path = "/Users/sarastankiewicz/workdir/hcao.owl"
foo = get_classes(owlfile= path)
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl <- basilisk::basiliskStart(env=bsklenv)
basilisk::basiliskRun(env=cl, function() {
o2 = reticulate::import("owlready2") # 'cached' by reticulate?
o2$get_ontology(owlfile)$load()$classes()
}, owlfile)
basiliskStop(cl)
}
foo = get_classes(owlfile= path)
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl = basilisk::basiliskStart(env=bsklenv)
basilisk::basiliskRun(env=cl, function() {
o2 = reticulate::import("owlready2") # 'cached' by reticulate?
o2$get_ontology(owlfile)$load()$classes()
}, owlfile)
basiliskStop(cl)
}
foo = get_classes(owlfile= path)
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl = basilisk::basiliskStart(env=bsklenv)
basilisk::basiliskRun(env=cl, function() {
o2 = reticulate::import("owlready2") # 'cached' by reticulate?
o2$get_ontology(owlfile)$load()$classes()
}, owlfile)
#basiliskStop(cl)
}
foo = get_classes(owlfile= path)
# necessary for python module control
bsklenv <- basilisk::BasiliskEnvironment(envname="bsklenv",
pkgname="litbas", packages="", pip="owlready2==0.45")
#' demo
#' @param owlfile path to owl file
#' @export
get_classes = function(owlfile) {
proc = basilisk::basiliskStart(bsklenv)
basilisk::basiliskRun(proc, function(owlfile) {
o2 = reticulate::import("owlready2") # 'cached' by reticulate?
o2$get_ontology(owlfile)$load()$classes()
}, owlfile)
}
path = "/Users/sarastankiewicz/workdir/hcao.owl"
foo = get_classes(owlfile= path)
library(littlebas)
library(littlebas)
cloppath = R.utils::decompressFile(
system.file("owl", "cl.owl.gz", package="littlebas"),
temporary=TRUE, ext="gz", FUN=gzfile, remove=FALSE,
overwrite=TRUE)
clc = get_classes(cloppath)
BiocManager::install("litbas")
BiocManager::install("litbas", type = "binary")
BiocManager::valid()
BiocManager::install("vjcitn/littlebas")
library(littlebas)
library(littlebas)
library(ontoProc)
#' return a generator with ontology classes
#' @import basilisk
#' @param owlfile reference to OWL file, can be URL, will be processed
#' by owlready2.get_ontology
#' @return generator with output of classes() on the loaded ontology
get_classes = function(owlfile){
cl = basilisk::basiliskStart(env=bsklenv)
basilisk::basiliskRun(env=cl, function() {
o2 = reticulate::import("owlready2") # 'cached' by reticulate?
o2$get_ontology(owlfile)$load()$classes()
}, owlfile)
#basiliskStop(cl)
}
#' @importFrom basilisk BasiliskEnvironment
bsklenv <- basilisk::BasiliskEnvironment(envname="bsklenv",
pkgname="ontoProc",
packages="python=3.9",
pip="owlready2==0.45"
)
path = "/Users/sarastankiewicz/workdir/hcao.owl"
foo = get_classes(owlfile= path)
library(littlebas)
cloppath = R.utils::decompressFile(
system.file("owl", "cl.owl.gz", package="littlebas"),
temporary=TRUE, ext="gz", FUN=gzfile, remove=FALSE,
overwrite=TRUE)
clc = get_classes(cloppath)
library(littlebas)
cloppath = R.utils::decompressFile(
system.file("owl", "cl.owl.gz", package="littlebas"),
temporary=TRUE, ext="gz", FUN=gzfile, remove=FALSE,
overwrite=TRUE)
clc = get_classes(cloppath)
clc
#' @importFrom basilisk BasiliskEnvironment
bsklenv <- basilisk::BasiliskEnvironment(envname="bsklenv",
pkgname="ontoProc",
packages="python=3.9",
pip="owlready2==0.45"
)
library(liybas)
library(litbas)
library(littlebas)
# necessary for python module control
bsklenv <- basilisk::BasiliskEnvironment(envname="bsklenv",
pkgname="litbas", packages="", pip="owlready2==0.45")
#' demo
#' @param owlfile path to owl file
#' @export
get_classes = function(owlfile) {
proc = basilisk::basiliskStart(bsklenv)
basilisk::basiliskRun(proc, function(owlfile) {
o2 = reticulate::import("owlready2") # 'cached' by reticulate?
o2$get_ontology(owlfile)$load()$classes()
}, owlfile)
}
path = "/Users/sarastankiewicz/workdir/hcao.owl"
foo = get_classes(owlfile= path)
library(littlebas)
cloppath = R.utils::decompressFile(
system.file("owl", "cl.owl.gz", package="littlebas"),
temporary=TRUE, ext="gz", FUN=gzfile, remove=FALSE,
overwrite=TRUE)
clc = get_classes(cloppath)
library(ontoProc)
library(littlebas)
cloppath = R.utils::decompressFile(
system.file("owl", "cl.owl.gz", package="littlebas"),
temporary=TRUE, ext="gz", FUN=gzfile, remove=FALSE,
overwrite=TRUE)
clc = get_classes(cloppath)
library(littlebas)
cloppath = R.utils::decompressFile(
system.file("owl", "cl.owl.gz", package="littlebas"),
temporary=TRUE, ext="gz", FUN=gzfile, remove=FALSE,
overwrite=TRUE)
clc = get_classes(cloppath)
clc
# necessary for python module control
bsklenv <- basilisk::BasiliskEnvironment(envname="bsklenv",
pkgname="littlebas", packages="", pip="owlready2==0.45")
#' demo
#' @param owlfile path to owl file
#' @export
get_classes = function(owlfile) {
proc = basilisk::basiliskStart(bsklenv)
basilisk::basiliskRun(proc, function(owlfile) {
o2 = reticulate::import("owlready2") # 'cached' by reticulate?
o2$get_ontology(owlfile)$load()$classes()
}, owlfile)
}
path = "/Users/sarastankiewicz/workdir/hcao.owl"
foo = get_classes(owlfile= path)
foo
clc$`__next__`()
library(littlebas)
cloppath = R.utils::decompressFile(
system.file("owl", "cl.owl.gz", package="littlebas"),
temporary=TRUE, ext="gz", FUN=gzfile, remove=FALSE,
overwrite=TRUE)
clc = get_classes(cloppath)
clc
library(ontoProc)
library(littlebas)
cloppath = R.utils::decompressFile(
system.file("owl", "cl.owl.gz", package="littlebas"),
temporary=TRUE, ext="gz", FUN=gzfile, remove=FALSE,
overwrite=TRUE)
clc = get_classes(cloppath)
clc
library(celldex)
Biocmanager::install("celldex")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.19")
BiocManager::install("celdex")
BiocManager::install("celldex")
BiocManager::install("celldex")
sessioninfo()
cat("\f")
sessionInfo()
BiocManager::install("celldex")
library(JBrowseR)
BiocManager::install("JBrowseR")
library(JBrowseR)
JBrowseR("ViewHg19",
location = "10:29,838,737..29,838,819")
library(JBrowseR)
JBrowseR("ViewHg19",location = "10:29,838,737..29,838,819")
BiocManager::install(c("duckdb","ensembldb"))
setwd('/Users/sarastankiewicz/workdir/JBrowseR/example_apps/load_data_frame')
source("app.R")
source("app.R")
library(shiny)
library(JBrowseR)
library(bslib)
ui <- fluidPage(
# Overriding the default bootstrap theme is needed to get proper font size
theme = bs_theme(version = 5),
titlePanel("JBrowseR Example"),
JBrowseROutput("widgetOutput")
)
server <- function(input, output, session) {
# create the assembly configuration
assembly <- assembly(
"https://jbrowse.org/genomes/hg19/fasta/hg19.fa.gz",
bgzip = TRUE,
aliases = c("GRCh37"),
refname_aliases = "https://s3.amazonaws.com/jbrowse.org/genomes/hg19/hg19_aliases.txt"
)
df <- data.frame(
chrom = c('1', '2'),
start = c(123, 456),
end = c(789, 101112),
name = c('feature1', 'feature2')
)
df_track <- track_data_frame(df, "foo", assembly)
# set up the final tracks object to be used
tracks <- tracks(
df_track
)
# determine what the browser displays by default
default_session <- default_session(
assembly,
c(df_track),
display_assembly = FALSE
)
output$widgetOutput <- renderJBrowseR(
JBrowseR("View",
assembly = assembly,
tracks = tracks,
location = "2:456",
defaultSession = default_session
)
)
}
shinyApp(ui, server)
path = "/Users/sarastankiewicz/workdir/GGI/Alveolar_Macrophages_IS.MICA:ILMN_3241692.CAU.meta"
AVL_MICA = tableDn8like = utils::read.table(path, header = TRUE)
getwd()
setwd("/Users/sarastankiewicz/workdir/GGI/GGIpack/inst/extdata/\"
)
)))
))))))))(()())
|||||\\\\\
setwd("/Users/sarastankiewicz/workdir/GGI/GGIpack/inst/extdata/")
AVL_MICA_CAU = utils::read.table(path, header = TRUE)
write.csv(AVL_MICA_CAU, "AVL_MICA_CAU.csv")
head(AVL_MICA)
mcols(AVL_MICA)
colnames(AVL_MICA)
setdiff(colnames(df), neededCols)
#chromosome = c("chromosome", "CHR","chrom")
neededCols = c("CHR", "start", "end", "P")
path ="/Users/sarastankiewicz/workdir/GGI/AVL_MICA_CAU.csv"
df = utils::read.table(path, header = TRUE)
path ="/Users/sarastankiewicz/workdir/GGI/Alveolar_Macrophages_IS.MICA:ILMN_3241692.CAU.meta"
df = utils::read.table(path, header = TRUE)
path ="/Users/sarastankiewicz/workdir/GGI/Alveolar_Macrophages_IS.MICA:ILMN_3241692.CAU.meta"
checkData = function(path){
df = utils::read.table(path, header = TRUE)
#chromosome = c("chromosome", "CHR","chrom")
neededCols = c("CHR", "start", "end", "P")
setdiff(colnames(df), neededCols)
}
df = utils::read.table(path, header = TRUE)
#chromosome = c("chromosome", "CHR","chrom")
neededCols = c("CHR", "start", "end", "P")
setdiff(colnames(df), neededCols)
setdiff( neededCols, colnames(df))
getwd()
path ="/Users/sarastankiewicz/workdir/GGI/GGIpack/inst/extdata/AVL_MICA_CAU.csv"
checkData = function(path){
df = utils::read.table(path, header = TRUE)
#chromosome = c("chromosome", "CHR","chrom")
neededCols = c("CHR", "start", "end", "P")
missingColumns = setdiff( neededCols, colnames(df))
}
df = utils::read.table(path, header = TRUE)
#chromosome = c("chromosome", "CHR","chrom")
neededCols = c("CHR", "start", "end", "P")
missingColumns = setdiff( neededCols, colnames(df))
missingColumns
colnames(df)
